#!/usr/bin/env node

/**
 * Script de verificaci√≥n despu√©s del deploy a producci√≥n
 * Verifica que todo est√© funcionando correctamente
 */

const PRODUCTION_URL = 'https://baltc-liga-starter.pages.dev';

const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function verifyProduction() {
  log('\nüß™ VERIFICANDO DEPLOY DE PRODUCCI√ìN', colors.bold + colors.blue);
  
  let tests = 0;
  let passed = 0;
  let failed = 0;

  // Test 1: Verificar que la app principal carga
  tests++;
  try {
    const response = await fetch(PRODUCTION_URL);
    if (response.ok) {
      log('‚úÖ App principal carga correctamente', colors.green);
      passed++;
    } else {
      log(`‚ùå App principal fall√≥ (${response.status})`, colors.red);
      failed++;
    }
  } catch (error) {
    log(`‚ùå Error al cargar app principal: ${error.message}`, colors.red);
    failed++;
  }

  // Test 2: Verificar que el admin carga
  tests++;
  try {
    const response = await fetch(`${PRODUCTION_URL}/admin`);
    if (response.ok) {
      log('‚úÖ Panel de administraci√≥n carga correctamente', colors.green);
      passed++;
    } else {
      log(`‚ùå Panel de administraci√≥n fall√≥ (${response.status})`, colors.red);
      failed++;
    }
  } catch (error) {
    log(`‚ùå Error al cargar admin: ${error.message}`, colors.red);
    failed++;
  }

  // Test 3: Verificar que el bot responde
  tests++;
  try {
    const response = await fetch(`${PRODUCTION_URL}/api/bot`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: 'test' })
    });
    
    if (response.ok) {
      const data = await response.json();
      if (data.success) {
        log('‚úÖ Bot responde correctamente', colors.green);
        passed++;
      } else {
        log(`‚ùå Bot no responde correctamente: ${data.error}`, colors.red);
        failed++;
      }
    } else {
      log(`‚ùå Bot fall√≥ (${response.status})`, colors.red);
      failed++;
    }
  } catch (error) {
    log(`‚ùå Error al probar bot: ${error.message}`, colors.red);
    failed++;
  }

  // Test 4: Verificar que el dashboard tiene datos
  tests++;
  try {
    const response = await fetch(`${PRODUCTION_URL}/api/admin/bot-dashboard`, {
      headers: { 'Authorization': 'Basic YWRtaW46Q2F0ZWdvcmlhQw==' }
    });
    
    if (response.ok) {
      const data = await response.json();
      if (data.success && data.data.leagueData.totalPlayers > 0) {
        log(`‚úÖ Dashboard tiene datos (${data.data.leagueData.totalPlayers} jugadores)`, colors.green);
        passed++;
      } else {
        log('‚ùå Dashboard no tiene datos de la liga', colors.red);
        failed++;
      }
    } else {
      log(`‚ùå Dashboard fall√≥ (${response.status})`, colors.red);
      failed++;
    }
  } catch (error) {
    log(`‚ùå Error al probar dashboard: ${error.message}`, colors.red);
    failed++;
  }

  // Test 5: Verificar que Workers AI funciona
  tests++;
  try {
    const response = await fetch(`${PRODUCTION_URL}/api/bot`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: '¬øCu√°ntos jugadores hay en la liga?' })
    });
    
    if (response.ok) {
      const data = await response.json();
      if (data.success && data.aiPowered) {
        log('‚úÖ Workers AI funciona correctamente', colors.green);
        passed++;
      } else {
        log('‚ùå Workers AI no funciona', colors.red);
        failed++;
      }
    } else {
      log(`‚ùå Workers AI fall√≥ (${response.status})`, colors.red);
      failed++;
    }
  } catch (error) {
    log(`‚ùå Error al probar Workers AI: ${error.message}`, colors.red);
    failed++;
  }

  // Resumen final
  log('\nüìä RESUMEN DE VERIFICACI√ìN:', colors.bold + colors.blue);
  log(`Total de tests: ${tests}`, colors.blue);
  log(`‚úÖ Pasados: ${passed}`, colors.green);
  log(`‚ùå Fallidos: ${failed}`, colors.red);
  
  if (failed === 0) {
    log('\nüéâ ¬°VERIFICACI√ìN EXITOSA! Producci√≥n funcionando correctamente', colors.bold + colors.green);
    process.exit(0);
  } else {
    log('\n‚ö†Ô∏è  ALGUNOS TESTS FALLARON. Revisar la configuraci√≥n', colors.bold + colors.yellow);
    process.exit(1);
  }
}

// Ejecutar verificaci√≥n
verifyProduction().catch(error => {
  log(`‚ùå Error durante la verificaci√≥n: ${error.message}`, colors.red);
  process.exit(1);
});
